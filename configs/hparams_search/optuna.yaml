# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    # storage: null

    # name of the study to persist optimization results
    # study_name: null

    # number of parallel workers
    # n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 20

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 200 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.0001, 0.1)
      model.optimizer.weight_decay: choice(0, 0.001, 0.002)
      datamodule.train_batch_size: choice(64, 128)
      # # model.net.cell_array: choice([64, 64, 32], [64, 64, 64], [64, 64, 128], [64, 128, 32], [64, 128, 64], [64, 128, 128], [128, 64, 32], [128, 64, 64], [128, 64, 128], [128, 128, 32], [128, 128, 64], [128, 128, 128])
      model.net.cell_array: choice([32, 32, 32], [64, 64, 64], [128, 128, 128], [64, 128, 64], [64, 128, 128, 64], [64, 64, 64, 64], [32, 64, 64, 32], [256, 256, 256], [128, 128, 128, 128])
      model.net.kernel_size: choice(5, 7, 11, 15)
      model.net.dropout: choice(0, 0.1, 0.2)


      # # transformer
      # model.net.d_model: choice(64, 128, 256)
      # model.net.dim_feedforward: choice(64, 128, 256)
      # model.net.mlp_dim: choice(64, 128, 256)
      # model.net.nhead: choice(2, 4, 8)
      # model.net.nlayers: choice(4, 8)
      # model.net.dropout: interval(0, 0.4)
